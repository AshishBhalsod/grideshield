

103.83.107.181:3000
Aa API vala server login details 
-> Putty thi login thvanu 

103.83.107.181
user: grid1
password: grid@123




exports.getTaskDetail = async (req, res) => {
    try {
        // Validate request body
        if (!req.body || Object.keys(req.body).length === 0) {
            return res.status(400).json({
                status: false,
                message: 'Request body is empty',
                data: {},
            });
        }

        const { task_id, userType } = req.body;

        // Validate task_id
        if (!task_id || !/^\d+$/.test(task_id) || task_id <= 0) {
            return res.status(400).json({
                status: false,
                message: 'task_id is required and must be a positive integer',
                data: {},
            });
        }

        // Validate userType
        if (!userType || !['staff', 'users'].includes(userType)) {
            return res.status(400).json({
                status: false,
                message: 'userType is required and must be "staff" or "users"',
                data: {},
            });
        }

        // Status mapping
        const statusMap = {
            0: 'Pending',
            1: 'Processing',
            2: 'Waiting For Customer Task',
            3: 'Done',
            4: 'Close'
        };

        // Fetch task from internal table
        const task = await Internal.findOne({
            where: { id: task_id },
            attributes: ['id', 'subject', 'status', 'dueDate', 'staff_id', 'description', 'attachment'],
            raw: true,
        });

        if (!task) {
            return res.status(404).json({
                status: false,
                message: 'Task not found',
                data: {},
            });
        }

        // Fetch usernames for assign_to
        const assignTo = await fetchUsernames(task.staff_id, userType);

        // Fetch logs from task_internal_logs
        const logs = await TaskInternalLogs.findAll({
            where: { internal_id: task_id },
            attributes: ['is_created', 'changed_by', 'change_time', 'new_staff_id'],
            order: [['change_time', 'ASC']],
            raw: true,
        });

        // Fetch usernames for assign_to_staff (latest log)
        const latestLog = logs[logs.length - 1];
        let assignToStaff = [];
        if (latestLog && latestLog.new_staff_id) {
            assignToStaff = await fetchUsernames(latestLog.new_staff_id, userType);
        }

        // Prepare response data
        const firstLog = logs[0] || null;
        const taskDetail = {
            
            subject: task.subject,
            status: statusMap[task.status] || 'Unknown',
            created_date: firstLog ? firstLog.change_time : null,
            due_date: task.dueDate,
            assign_to: assignTo,
            assign_from: firstLog ? firstLog.is_created : null,
            changed_by: latestLog ? latestLog.changed_by : null,
            changed_time: latestLog ? latestLog.change_time : null,
            assign_to_staff: assignToStaff,
            comments_attachments: logs.map(log => ({
                name: log.is_created,
                comment: task.description,
                comment_date: log.change_time,
                attachments: task.attachment ? JSON.parse(task.attachment) : []
            }))
        };

        return res.status(200).json({
            status: true,
            message: 'Task details retrieved successfully',
            data: taskDetail,
        });
    } catch (error) {
        console.error('Get task detail error:', error);
        return res.status(500).json({
            status: false,
            message: 'Server error',
            data: {},
        });
    }
};